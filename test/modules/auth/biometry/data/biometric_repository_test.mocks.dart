// Mocks generated by Mockito 5.4.4 from annotations
// in app_test/test/modules/auth/biometry/data/biometric_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app_test/modules/auth/biometry/domain/usecases/biometric_usecase.dart'
    as _i3;
import 'package:local_auth/local_auth.dart' as _i2;
import 'package:local_auth_android/local_auth_android.dart' as _i5;
import 'package:local_auth_darwin/local_auth_darwin.dart' as _i6;
import 'package:local_auth_windows/local_auth_windows.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocalAuthentication_0 extends _i1.SmartFake
    implements _i2.LocalAuthentication {
  _FakeLocalAuthentication_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BiometricUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricUseCase extends _i1.Mock implements _i3.BiometricUseCase {
  MockBiometricUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocalAuthentication get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeLocalAuthentication_0(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i2.LocalAuthentication);

  @override
  _i4.Future<bool> checkBiometrics() => (super.noSuchMethod(
        Invocation.method(
          #checkBiometrics,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableBiometrics,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.BiometricType>>.value(<_i2.BiometricType>[]),
      ) as _i4.Future<List<_i2.BiometricType>>);

  @override
  _i4.Future<bool> authenticate() => (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> authenticateWithBiometrics() => (super.noSuchMethod(
        Invocation.method(
          #authenticateWithBiometrics,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> cancelAuthentication() => (super.noSuchMethod(
        Invocation.method(
          #cancelAuthentication,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [LocalAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthentication extends _i1.Mock
    implements _i2.LocalAuthentication {
  MockLocalAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get canCheckBiometrics => (super.noSuchMethod(
        Invocation.getter(#canCheckBiometrics),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> authenticate({
    required String? localizedReason,
    Iterable<_i5.AuthMessages>? authMessages = const [
      _i6.IOSAuthMessages(),
      _i5.AndroidAuthMessages(),
      _i7.WindowsAuthMessages(),
    ],
    _i2.AuthenticationOptions? options = const _i2.AuthenticationOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
          {
            #localizedReason: localizedReason,
            #authMessages: authMessages,
            #options: options,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> stopAuthentication() => (super.noSuchMethod(
        Invocation.method(
          #stopAuthentication,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isDeviceSupported() => (super.noSuchMethod(
        Invocation.method(
          #isDeviceSupported,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableBiometrics,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.BiometricType>>.value(<_i2.BiometricType>[]),
      ) as _i4.Future<List<_i2.BiometricType>>);
}
